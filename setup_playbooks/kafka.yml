---
- name: Deploy a Kafka container with Podman using KRaft mode (Enhanced Version)
  hosts: all
  become: true
  vars:
    kafka_container_name: cp-kafka
    kafka_image: "docker.io/confluentinc/cp-kafka:7.9.0"
    kafka_memory_limit: "4096m"
    kafka_port: 9092
    kafka_controller_port: 9093
    kafka_data_dir: /var/lib/kafka/data
    # Generate a random cluster ID - in production you should use a fixed value
    kafka_cluster_id: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=32') }}"
    kafka_env_vars:
      # Explicitly disable ZooKeeper
      KAFKA_ZOOKEEPER_CONNECT: ""
      # Enable KRaft mode explicitly
      KAFKA_SERVER_ROLES: "broker,controller"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_NODE_ID: "1"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@localhost:9093"
      # KRaft requires this to be initialized
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093,PLAINTEXT_INTERNAL://0.0.0.0:29092"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://broker:9092,PLAINTEXT_INTERNAL://broker:29092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT"
      # These settings are still needed
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: "1"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
      # Required for KRaft
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      # Format the directories for KRaft
      KAFKA_LOG_DIRS: "/var/lib/kafka/data"
      # Set cluster ID environment variable
      CLUSTER_ID: "{{ kafka_cluster_id }}"
      # Force use of KRaft even in older images
      KAFKA_METADATA_LOG_DIR: "/var/lib/kafka/data"
      # Disable features incompatible with KRaft
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      # Force KRaft metadata version
      KAFKA_KRAFT_CLUSTER_ID: "{{ kafka_cluster_id }}"
  tasks:
    - name: Ensure required packages are installed
      ansible.builtin.package:
        name:
          - podman
          - python3-podman
        state: present

    - name: Create data directory for Kafka
      ansible.builtin.file:
        path: "{{ kafka_data_dir }}"
        state: directory
        mode: '0755'

    - name: Create Podman network if it doesn't exist
      containers.podman.podman_network:
        name: kafka-network
        state: present

    - name: Remove existing Kafka container if it exists
      containers.podman.podman_container:
        name: "{{ kafka_container_name }}"
        state: absent
      ignore_errors: yes

    - name: Start Kafka container with KRaft mode
      containers.podman.podman_container:
        name: "{{ kafka_container_name }}"
        image: "{{ kafka_image }}"
        state: started
        detach: true
        memory: "{{ kafka_memory_limit }}"
        env: "{{ kafka_env_vars }}"
        hostname: broker
        publish:
          - "{{ kafka_port }}:{{ kafka_port }}"
          - "{{ kafka_controller_port }}:{{ kafka_controller_port }}"
          - "29092:29092"
        restart_policy: always
        network: kafka-network
        volume:
          - "{{ kafka_data_dir }}:/var/lib/kafka/data:Z"

    # Initialize KRaft metadata and verify proper operation
    # The approach used creates a minimal KRaft properties file to avoid legacy cluster warnings
    - name: Wait for Kafka container to be ready
      ansible.builtin.pause:
        seconds: 10

    # Try a simpler approach for KRaft initialization
    - name: Check if directories need to be formatted
      containers.podman.podman_container_exec:
        name: "{{ kafka_container_name }}"
        command: bash -c "ls -la /var/lib/kafka/data/"
      register: dir_check
      ignore_errors: yes

    - name: Execute KRaft format directly with adequate memory
      containers.podman.podman_container_exec:
        name: "{{ kafka_container_name }}"
        command: bash -c "KAFKA_HEAP_OPTS='-Xms512m -Xmx1g' echo 'process.roles=broker,controller' > /tmp/minimal.properties && echo 'node.id=1' >> /tmp/minimal.properties && echo 'controller.quorum.voters=1@localhost:9093' >> /tmp/minimal.properties && echo 'controller.listener.names=CONTROLLER' >> /tmp/minimal.properties && echo 'listeners=PLAINTEXT://localhost:9092,CONTROLLER://localhost:9093' >> /tmp/minimal.properties && echo 'advertised.listeners=PLAINTEXT://localhost:9092,CONTROLLER://localhost:9093' >> /tmp/minimal.properties && kafka-storage format -t {{ kafka_cluster_id }} -c /tmp/minimal.properties || echo 'Format command failed with exit code $?'"
      register: format_result
      ignore_errors: yes
      when: "dir_check.stdout is defined and '__cluster_metadata-0' not in dir_check.stdout"

    - name: Display format result
      ansible.builtin.debug:
        var: format_result

    - name: Restart Kafka container if format was needed
      containers.podman.podman_container:
        name: "{{ kafka_container_name }}"
        state: started
        force_restart: true
      when: format_result.stderr is defined and format_result.stderr != ''

    - name: Wait for Kafka to initialize after restart
      ansible.builtin.pause:
        seconds: 15
      when: format_result.stderr is defined and format_result.stderr != ''

    - name: Check Kafka container status
      containers.podman.podman_container_info:
        name: "{{ kafka_container_name }}"
      register: container_info

    - name: Display container status
      ansible.builtin.debug:
        msg: "Kafka container is {{ container_info.containers[0].State.Status }}"
      when: container_info.containers | length > 0

    # Check if the container is actually using KRaft mode
    - name: Look for Kafka processes
      containers.podman.podman_container_exec:
        name: "{{ kafka_container_name }}"
        command: bash -c "ps aux | grep -i kafka || echo 'No Kafka processes found'"
      register: process_info
      ignore_errors: yes

    - name: Display process information
      ansible.builtin.debug:
        msg: "{{ process_info.stdout if process_info.stdout is defined else 'No process information available' }}"

    # Check various possible log locations in the container
    - name: Find Kafka-specific log files
      containers.podman.podman_container_exec:
        name: "{{ kafka_container_name }}"
        command: bash -c "find /var/lib/kafka /opt/kafka /etc/kafka /var/log /tmp -name '*.log' 2>/dev/null || echo 'No Kafka logs found in common directories'"
      register: kafka_log_files
      ignore_errors: yes

    - name: Check Kafka configuration
      containers.podman.podman_container_exec:
        name: "{{ kafka_container_name }}"
        command: bash -c "cat /etc/kafka/server.properties 2>/dev/null || cat /etc/kafka/kraft/server.properties 2>/dev/null || echo 'Server properties file not found'"
      register: kafka_config
      ignore_errors: yes

    - name: Check container environment variables
      containers.podman.podman_container_exec:
        name: "{{ kafka_container_name }}"
        command: bash -c "env | grep -i kafka"
      register: kafka_env
      ignore_errors: yes

    - name: Display kafka configuration
      ansible.builtin.debug:
        msg: "{{ (kafka_config.stdout|string)[:500] + '...' if kafka_config.stdout|string|length > 500 else kafka_config.stdout|default('No configuration found') }}"

    - name: Display Kafka environment variables
      ansible.builtin.debug:
        msg: "{{ kafka_env.stdout if kafka_env.stdout is defined else 'No Kafka environment variables found' }}"

    - name: Display log files found
      ansible.builtin.debug:
        msg: "{{ kafka_log_files.stdout if kafka_log_files.stdout is defined else 'No log files found' }}"