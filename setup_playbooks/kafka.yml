---
- name: Deploy a Kafka container with Podman using KRaft mode (Enhanced Version)
  hosts: all
  become: true
  vars:
    kafka_container_name: cp-kafka
    kafka_image: "docker.io/confluentinc/cp-kafka:7.9.0"
    kafka_memory_limit: "4096m"
    kafka_port: 9092
    kafka_controller_port: 9093
    kafka_data_dir: /var/lib/kafka/data
    # Generate a random cluster ID - in production you should use a fixed value
    kafka_cluster_id: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=32') }}"
    kafka_env_vars:
      # Explicitly disable ZooKeeper
      KAFKA_ZOOKEEPER_CONNECT: ""
      # Enable KRaft mode explicitly
      KAFKA_SERVER_ROLES: "broker,controller"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_NODE_ID: "1"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@broker:9093"
      # KRaft requires this to be initialized
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093,PLAINTEXT_INTERNAL://0.0.0.0:29092"
      # Use the hostname instead of 0.0.0.0 in advertised listeners (important fix)
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://broker:9092,PLAINTEXT_INTERNAL://broker:29092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT"
      # These settings are still needed
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: "1"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
      # Required for KRaft
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      # Format the directories for KRaft
      KAFKA_LOG_DIRS: "/var/lib/kafka/data"
      # Set cluster ID environment variable
      CLUSTER_ID: "{{ kafka_cluster_id }}"
      # Force use of KRaft even in older images
      KAFKA_METADATA_LOG_DIR: "/var/lib/kafka/data"
      # Enable auto topic creation
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      # Force KRaft metadata version
      KAFKA_KRAFT_CLUSTER_ID: "{{ kafka_cluster_id }}"
  tasks:
    - name: Ensure required packages are installed
      ansible.builtin.package:
        name:
          - podman
          - python3-podman
        state: present

    # Create the parent directory structure if it doesn't exist
    - name: Ensure parent directory structure exists
      ansible.builtin.file:
        path: "{{ kafka_data_dir | dirname }}"
        state: directory
        mode: '0755'

    # Clear existing data before starting fresh
    - name: Remove existing Kafka data directory if it exists
      ansible.builtin.file:
        path: "{{ kafka_data_dir }}"
        state: absent

    # Create a clean data directory with proper permissions
    - name: Create clean data directory with proper permissions
      ansible.builtin.file:
        path: "{{ kafka_data_dir }}"
        state: directory
        owner: "1000"  # appuser in the container
        group: "1000"
        mode: '0755'

    # Create network for Kafka
    - name: Create Podman network if it doesn't exist
      containers.podman.podman_network:
        name: kafka-network
        state: present

    # Remove existing container if it exists
    - name: Remove existing Kafka container if it exists
      containers.podman.podman_container:
        name: "{{ kafka_container_name }}"
        state: absent
      ignore_errors: yes

    # Start the Kafka container with proper configuration
    - name: Start Kafka container with KRaft mode
      containers.podman.podman_container:
        name: "{{ kafka_container_name }}"
        image: "{{ kafka_image }}"
        state: started
        detach: true
        memory: "{{ kafka_memory_limit }}"
        env: "{{ kafka_env_vars }}"
        hostname: broker
        publish:
          - "{{ kafka_port }}:{{ kafka_port }}"
          - "{{ kafka_controller_port }}:{{ kafka_controller_port }}"
          - "29092:29092"
        restart_policy: always
        network: kafka-network
        volume:
          - "{{ kafka_data_dir }}:/var/lib/kafka/data:Z"

    # Give Kafka sufficient time to initialize
    - name: Wait for Kafka container to be ready
      ansible.builtin.pause:
        seconds: 30

    # Check if container is running
    - name: Check Kafka container status
      containers.podman.podman_container_info:
        name: "{{ kafka_container_name }}"
      register: container_info

    - name: Display container status
      ansible.builtin.debug:
        msg: "Kafka container is {{ container_info.containers[0].State.Status }}"
      when: container_info.containers | length > 0

    # View logs to troubleshoot potential issues - fixed command
    - name: Get container logs
      ansible.builtin.shell:
        cmd: podman logs {{ kafka_container_name }} | tail -n 30
      register: container_logs
      changed_when: false

    - name: Display container logs
      ansible.builtin.debug:
        var: container_logs.stdout_lines

    # Verify that Kafka is actually running inside the container
    - name: Check for Kafka processes
      containers.podman.podman_container_exec:
        name: "{{ kafka_container_name }}"
        command: bash -c "ps aux | grep -v grep | grep -i kafka || echo 'No Kafka processes found'"
      register: process_check
      ignore_errors: yes

    - name: Display Kafka process info
      ansible.builtin.debug:
        var: process_check.stdout_lines if process_check.stdout is defined else "No Kafka processes found running"

    # Test connectivity by listing topics
    - name: Test if Kafka broker is accepting connections
      containers.podman.podman_container_exec:
        name: "{{ kafka_container_name }}"
        command: bash -c "kafka-topics --list --bootstrap-server broker:9092"
      register: topic_list
      ignore_errors: yes
      retries: 3
      delay: 10
      until: topic_list.rc == 0

    - name: Display topic list
      ansible.builtin.debug:
        var: topic_list.stdout_lines if topic_list.stdout is defined else "No output from topic list command"

    # Create a test topic to confirm functionality
    - name: Create a test topic
      containers.podman.podman_container_exec:
        name: "{{ kafka_container_name }}"
        command: bash -c "kafka-topics --create --topic ansible-test-topic --bootstrap-server broker:9092 --partitions 1 --replication-factor 1"
      register: create_topic
      ignore_errors: yes
      retries: 2
      delay: 5
      until: create_topic.rc == 0

    - name: Display create topic result
      ansible.builtin.debug:
        var: create_topic.stdout_lines if create_topic.stdout is defined else create_topic.stderr_lines if create_topic.stderr is defined else "No output from create topic command"

    # Write a test message
    - name: Write a test message to the topic
      containers.podman.podman_container_exec:
        name: "{{ kafka_container_name }}"
        command: bash -c "echo 'Hello from Ansible' | kafka-console-producer --topic ansible-test-topic --bootstrap-server broker:9092"
      register: produce_message
      ignore_errors: yes

    - name: Display producer result
      ansible.builtin.debug:
        var: produce_message.stdout_lines if produce_message.stdout is defined else produce_message.stderr_lines if produce_message.stderr is defined else "No output from producer command"

    # Read the test message
    - name: Read the test message from the topic
      containers.podman.podman_container_exec:
        name: "{{ kafka_container_name }}"
        command: bash -c "kafka-console-consumer --topic ansible-test-topic --from-beginning --bootstrap-server broker:9092 --max-messages 1 --timeout-ms 10000"
      register: consume_message
      ignore_errors: yes

    - name: Display consumed message
      ansible.builtin.debug:
        var: consume_message.stdout_lines if consume_message.stdout is defined else consume_message.stderr_lines if consume_message.stderr is defined else "No message could be consumed"

    # Manual formatting if needed (more explicit than auto-format)
    - name: Manual KRaft format
      containers.podman.podman_container_exec:
        name: "{{ kafka_container_name }}"
        command: bash -c "mkdir -p /tmp/kraft && echo 'process.roles=broker,controller' > /tmp/kraft/config.properties && echo 'node.id=1' >> /tmp/kraft/config.properties && echo 'controller.quorum.voters=1@broker:9093' >> /tmp/kraft/config.properties && echo 'controller.listener.names=CONTROLLER' >> /tmp/kraft/config.properties && echo 'listeners=PLAINTEXT://broker:9092,CONTROLLER://broker:9093' >> /tmp/kraft/config.properties && echo 'advertised.listeners=PLAINTEXT://broker:9092,CONTROLLER://broker:9093' >> /tmp/kraft/config.properties && KAFKA_HEAP_OPTS='-Xms512m -Xmx1g' kafka-storage format -t {{ kafka_cluster_id }} -c /tmp/kraft/config.properties"
      register: format_result
      ignore_errors: yes

    - name: Display format result
      ansible.builtin.debug:
        var: format_result.stdout_lines if format_result.stdout is defined else format_result.stderr_lines if format_result.stderr is defined else "No output from format command"

    # Restart the container if we did the manual formatting
    - name: Restart Kafka container after manual formatting
      containers.podman.podman_container:
        name: "{{ kafka_container_name }}"
        state: started
        restart: true
      when: format_result.rc is defined

    # Wait for restart if needed
    - name: Wait for Kafka to restart if needed
      ansible.builtin.pause:
        seconds: 20
      when: format_result.rc is defined

    # Simple instructions for testing manually
    - name: Display manual testing instructions
      ansible.builtin.debug:
        msg: |
          Kafka appears to be set up. To manually test:

          1. Create a topic:
             podman exec -it {{ kafka_container_name }} kafka-topics --create --topic test-topic --bootstrap-server broker:9092 --partitions 1 --replication-factor 1

          2. Send a message:
             podman exec -it {{ kafka_container_name }} bash -c "echo 'Test message' | kafka-console-producer --topic test-topic --bootstrap-server broker:9092"

          3. Consume messages:
             podman exec -it {{ kafka_container_name }} kafka-console-consumer --topic test-topic --from-beginning --bootstrap-server broker:9092 --max-messages 1

          To check if the service is working from the host system:
             podman exec -it {{ kafka_container_name }} bash -c "echo 'External test' | kafka-console-producer --topic test-topic --bootstrap-server localhost:9092"